<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JVM的常见面试点</title>
    <url>/2020/03/21/JVM/</url>
    <content><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="一、运行时数据区域"><a href="#一、运行时数据区域" class="headerlink" title="一、运行时数据区域"></a>一、运行时数据区域</h2><p>JVM也就是java虚拟机，运行时的数据区域分为：程序计数器、Java虚拟机栈、本地方法栈、堆、方法区、运行时常量池、直接内存。</p>
<h3 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1. 程序计数器"></a>1. 程序计数器</h3><p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的为本地方法则为空）</p>
<h3 id="2-Java虚拟机栈"><a href="#2-Java虚拟机栈" class="headerlink" title="2. Java虚拟机栈"></a>2. Java虚拟机栈</h3><p>每个java方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完毕的过程，对应每一个栈帧在Java虚拟机中入栈和出栈的过程</p>
<p>可能会抛出的异常：</p>
<ul>
<li>线程请求的栈深度超过最大值，会抛出StackOverflowError异常</li>
<li>栈进行动态扩展时如果无法申请到足够的内存，会抛出OutOfMemoryError异常</li>
</ul>
<h3 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3. 本地方法栈"></a>3. 本地方法栈</h3><p>本地方法栈与Java虚拟机栈类似，区别在于本地方法栈是为本地方法服务的。</p>
<p>本地方法一般使用其他语言（C++/C/汇编等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特殊处理。</p>
<h3 id="4-堆"><a href="#4-堆" class="headerlink" title="4. 堆"></a>4. 堆</h3><p>堆的主要作用就是给所有对象分配内存，是垃圾收集的主要区域。（GC堆）</p>
<p>堆为了方便回收，加上现代的垃圾收集器都是分代回收的，堆可以划分为新生代（Young Generation）和老年代（Old Generation）</p>
<p>堆不需要连续的内存，并且可以动态的增加其内存，增加失败会抛出OutOfMemoryError异常。</p>
<p>可以使用<code>-XMs20M  -XMx40M</code>设置堆内存大小，第一个是初始值，第二个是最大值</p>
<h3 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5. 方法区"></a>5. 方法区</h3><p>用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<p>和堆一样不需要连续的内存。并且可以动态扩展，动态扩展失败一样会抛出OutOfMemoryError异常。</p>
<p>对这块区域的回收主要是对常量池的回收和对类的卸载，但是一般比较难实现。</p>
<p>JDK1.8以后方法区被移至元空间，它位于本地内存中，而不是虚拟机内存中。因为在之前的HotSpot虚拟机都是将方法区的回收当成永久代进行回收，但是很难确定回收内存的大小，因为它们受到很多因素的影响，并且每次FullGC之后永久代的空间都会变，所以经常会抛出OutMemoryError异常。</p>
<p>方法区是JVM的一个规范，永久代和元空间都是它的实现方式，在JDK1.8之后，原来永久代的数据被分到元空间中，元空间存储类的元信息，静态变量和常量池等放入堆中。</p>
<h3 id="6-运行时常量池"><a href="#6-运行时常量池" class="headerlink" title="6. 运行时常量池"></a>6. 运行时常量池</h3><p>运行时常量池是方法区的一部分。</p>
<p>Class文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。</p>
<h3 id="7-直接内存"><a href="#7-直接内存" class="headerlink" title="7. 直接内存"></a>7. 直接内存</h3><p>在JDK1.4之后新引入了NIO类，它可以使用native函数库直接分配堆外内存，然后通过java堆里的 DirectByteBuffer对象作为这块内存的引用进行操作，这样能在一些场景下显著提升性能，因为避免了在堆内存和堆外内存来回拷贝数据。</p>
<h3 id="8-线程所属"><a href="#8-线程所属" class="headerlink" title="8. 线程所属"></a>8. 线程所属</h3><p>上述属于线程私有的：</p>
<ul>
<li>程序计数器</li>
<li>虚拟机栈</li>
<li>本地方法栈</li>
</ul>
<p>属于线程共有的：</p>
<ul>
<li>堆</li>
<li>方法区</li>
<li>运行时常量池</li>
<li>直接内存</li>
</ul>
<h2 id="二、垃圾回收"><a href="#二、垃圾回收" class="headerlink" title="二、垃圾回收"></a>二、垃圾回收</h2><p>线程私有的部分都只存在于线程的生命周期之内，线程结束之后就消失。所以一般的垃圾回收主要是针对堆和方法区而言的。</p>
<p>既然要进行垃圾回收，就需要判断哪些是JVM中认定的可回收的“垃圾”。</p>
<h3 id="判断一个对象是否可被回收"><a href="#判断一个对象是否可被回收" class="headerlink" title="判断一个对象是否可被回收"></a>判断一个对象是否可被回收</h3><p>为对象添加一个引用计数器，当对象增加一个计数+1，引用失效时计数器-1，引用计数为0的对象可被回收。</p>
<p>在两个对象出现循环引用的情况下，此时引用计数器永远不为0，导致无法对它们进行回收，正是因为循环引用的存在，因此Java虚拟机不使用引用计数法。</p>
<h4 id="1-可达性分析算法"><a href="#1-可达性分析算法" class="headerlink" title="1. 可达性分析算法"></a>1. 可达性分析算法</h4><p>以GC Roots为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。</p>
<p>Java 虚拟机使用该算法来判断对象是否可被回收，GC Roots一般包含一下内容：</p>
<ul>
<li>虚拟机栈局部变量表中引用的对象</li>
<li>本地方法栈JNI中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中的常量引用的对象</li>
</ul>
<h4 id="2-方法区的回收"><a href="#2-方法区的回收" class="headerlink" title="2. 方法区的回收"></a>2. 方法区的回收</h4><p>因为方法区主要存放永久代对象，而永久代的回收率比新生代低很多，所以在方法区进行回收性价比不高。</p>
<p>主要是对常量池的回收和对类的卸载</p>
<p>为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。</p>
<p>类的卸载条件很多，需要满足三大条件，并且满足了条件也不一定会被卸载：</p>
<ul>
<li>该类所有的实例都已经被回收，此时堆中不存在该类的任何实例</li>
<li>加载该类的ClassLoader已经被回收</li>
<li>该类对应的Class对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法</li>
</ul>
<h4 id="3-finalize"><a href="#3-finalize" class="headerlink" title="3.  finalize()"></a>3.  finalize()</h4><p>类似C++的析构函数，用于关闭外部资源。但是try-finally等方式可以做的更好，并且该方法运行代价很高，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。</p>
<p>当一个对象可被回收时，如果需要执行该对象的finalize()方法，那么就有可能在该方法让对象重新被引用，从而实现自救，自救只能进行一次，如果回收的对象之前调用finalize()方法自救，后面回收时不会再调用该方法。</p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。</p>
<p>Java提供了四种强度不同的引用类型。</p>
<h4 id="1-强引用"><a href="#1-强引用" class="headerlink" title="1. 强引用"></a>1. 强引用</h4><p>被强引用关联的对象不会被回收</p>
<p>使用 new一个新对象的方式来创建引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object object = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure>

<h4 id="2-软引用"><a href="#2-软引用" class="headerlink" title="2. 软引用"></a>2. 软引用</h4><p>被软引用关联的对象只有在内存不够的情况下才会被回收</p>
<p>使用SoftReference类来创建软引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    SoftReference&lt;Object&gt; softReference = <span class="keyword">new</span> SoftReference&lt;&gt;(object);</span><br><span class="line">    <span class="comment">// 使对象只被软引用关联</span></span><br><span class="line">    object = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-弱引用"><a href="#3-弱引用" class="headerlink" title="3. 弱引用"></a>3. 弱引用</h4><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前</p>
<p>使用WeakReference来创建弱引用。</p>
<h4 id="4-虚引用"><a href="#4-虚引用" class="headerlink" title="4. 虚引用"></a>4. 虚引用</h4><p>又被称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。</p>
<p>为一个对象设置虚引用的唯一目的是能在这个对象被回收时受到一个系统通知</p>
<p>使用PhantomReference 来构建虚引用</p>
<h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><h4 id="1-标记-清除"><a href="#1-标记-清除" class="headerlink" title="1. 标记-清除"></a>1. 标记-清除</h4><p>在标记阶段，程序会检查每个对象是否为活动对象，如果是活动对象，则程序会在对象头部打上标记。</p>
<p>在清除阶段，会进行对象回收并取消标志位，另外，还会判断回收后的分块与前一个空闲分块是否连续，若连续，会合并这个两个分块。回收对象就是把对象作为分块，连接到被称为“空闲链表”的单向链表，之后进行分配时只需要遍历这个空闲链表，就可以找到分块。</p>
<p>在分配时，程序会搜索空闲链表寻找空间大于等于新对象大小size的块block，如果它找到的块等于size，会直接返回这个分块；如果找到的块大于size，会将这个块分割成size大小和block-size大小的两块，返回大小为size的分块，并将block-size块返回给空闲链表</p>
<p>存在的不足：</p>
<ul>
<li>标记和清除效率都不高</li>
<li>会产生大量的不连续的内存碎片，导致无法给大对象分配内存</li>
</ul>
<h4 id="2-标记-整理"><a href="#2-标记-整理" class="headerlink" title="2. 标记-整理"></a>2. 标记-整理</h4><p>标记整理的话，标记与上面1的标记相同，只是在回收之前会有一个整理过程，让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>
<p>优点：</p>
<p>不会产生内存碎片</p>
<p>缺点：</p>
<p>需要移动大量对象，处理效率比较低</p>
<h4 id="3-复制"><a href="#3-复制" class="headerlink" title="3. 复制"></a>3. 复制</h4><p>将内存划分为两块大小相等的块，每次只使用其中一块，当这一块的内存使用完了就将还存活的对象复制到另一块上面，然后把使用过的内存空间一次清理。</p>
<p>主要存在的不足就是使用了内存的一半空间</p>
<p>现在的商业虚拟机都采用这种收集算法回收新生代，但是并不是划分为大小相等的块，而是划分为一块较大的Eden和两块较小的Survivor块，每次使用Eden空间和Survivor中的一块，在回收时，将Eden和Survivor中还存活着的对象全部复制到另一块Survivor上去，最后清理Eden和使用过的那一块的Survivor空间即可。</p>
<p>HotSpot虚拟机有Eden和Survivor大小比例默认为8:1，保证了内存的利用了达到90%，如果每次回收有多于10%的对象存活的话，那么一块Survivor对象就不够用了，此时需要依赖老年代进行 空间分配担保，就是借用老年代的空间存储放不下的对象。</p>
<h4 id="4-分代收集"><a href="#4-分代收集" class="headerlink" title="4. 分代收集"></a>4. 分代收集</h4><p>现在的商业虚拟机使用分代收集算法，它根据对象存货周期将内存分为几块，不同块采用适当的收集算法。</p>
<p>一般是分为新生代和老年代：</p>
<ul>
<li>新生代一般使用复制算法，因为回收的内存空间大，存活的对象少</li>
<li>老年代一般使用标记-清除或者标记-整理算法</li>
</ul>
<h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1581662395801.png" alt="1581662395801"></p>
<p>以上是HotSpot的7个垃圾收集器，连线表示收集器之间可以配合使用</p>
<ul>
<li>单线程与多线程：单线程指的是垃圾收集器只使用一个线程，多线程表示使用多个线程</li>
<li>串行和并行：串行是指垃圾收集器与用户线程交替执行，这意味着再执行垃圾收集线程的时候需要停顿用户线程；并行是指垃圾收集器线程与用户线程一起执行。除了CMS和G1收集器之外其他的垃圾收集器都是以串行的方式执行</li>
</ul>
<h4 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1. Serial收集器"></a>1. Serial收集器</h4><p>串行收集器，以串行的方式执行。它是单线程垃圾收集器，只会使用一个垃圾收集线程执行垃圾的回收。</p>
<p><strong>优点</strong>：简单高效，在单个CPU环境下，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p>
<p>它是Client场景下默认的新生代收集器，因为在该场景下内存一般来说不会很大。它收集一两百兆的垃圾的停顿时间可以控制在100多毫秒之内，只要不是太频繁，这点停顿时间是可以接受的。</p>
<h4 id="2-ParNew收集器"><a href="#2-ParNew收集器" class="headerlink" title="2. ParNew收集器"></a>2. ParNew收集器</h4><p>它是Serial收集器的多线程版本。</p>
<p>它是Server场景下默认的新生代收集器，除了性能原因外，主要是因为除了Serial收集器，只有它能与CMS收集器配合使用。</p>
<h4 id="3-Parallel-Scavenger收集器"><a href="#3-Parallel-Scavenger收集器" class="headerlink" title="3. Parallel Scavenger收集器"></a>3. Parallel Scavenger收集器</h4><p>与ParNew一样是多线程收集器。</p>
<p>其他收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制吞吐量，因此它被称为“吞吐量优先”的收集器，这里的吞吐量指CPU用于运行用户程序的时间占总时间的比值。</p>
<p>停顿时间越短越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量可以高效率地利用CPU时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。</p>
<p>缩短停顿时间是以牺牲吞吐量和新生代空间来实现的：新生代空间变小，垃圾回收频繁，导致吞吐量下降。（这里的原因是新生代空间如果大的话，一次收集需要停顿的时间可能是100ms，但是如果小的话，停顿时间可能只需要30ms，停顿时间缩短了，但是吞吐量也下降了）</p>
<p>可以通过一个开关参数打开GC自适应调节策略（GC Ergonomics），就不需要手动指定新生代的大小（-Xmn）、Eden和Survivor大小比例、晋升老年代的年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。</p>
<h4 id="4-Serial-Old收集器"><a href="#4-Serial-Old收集器" class="headerlink" title="4. Serial Old收集器"></a>4. Serial Old收集器</h4><p>Serial收集器的老年代版本，也是Client场景下使用的，如果在Server场景下：</p>
<ul>
<li>在JDK1.5以及之前版本（Parallel Old诞生之前）中与Parallel Scavenge收集器搭配使用</li>
<li>作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用</li>
</ul>
<h4 id="5-Parallel-Old收集器"><a href="#5-Parallel-Old收集器" class="headerlink" title="5. Parallel Old收集器"></a>5. Parallel Old收集器</h4><p>Parallel Scavenge收集器的老年代版本</p>
<p>在注重吞吐量以及CPU敏感的场合，都可以优先考虑Paralllel Scavenge结合Parallel Old收集器使用</p>
<h4 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6. CMS收集器"></a>6. CMS收集器</h4><p>CMS（Concurrent Mark Sweep），并发标记清除。</p>
<p>分为四个流程来进行：</p>
<ul>
<li>初始标记：仅仅只是标记一下GC Roots能够关联到的对象，速度很快，<strong>需要停顿</strong></li>
<li>并发标记：进行GC Roots Tracing的过程，它在整个回收过程中耗时最长，<strong>不需要停顿</strong></li>
<li>重新标记：为了修正并发标记期间因用户线程继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿（不停顿就可能需要一直循环标记了:smile:）</li>
<li>并发清除：<strong>不需要停顿</strong></li>
</ul>
<p>缺点：</p>
<ul>
<li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致CPU利用率不够高</li>
<li>无法处理浮动垃圾，可能出现Concurrent Mode Failure。浮动垃圾指的是在并发清除阶段由于用户线程继续运行而产生的垃圾，这部分的垃圾只能到下一次的垃圾回收才能够被回收，由于浮动垃圾的存在，因此需要预留出一部分内存，以为这CMS收集器不能像其他垃圾收集器一样等到老年代内存快满的时候再进行回收。如果预留的内存不够存放浮动垃圾，就会出现Concurrent Mode Failure，这时虚拟机将启用Serial Old来替代CMS。</li>
<li>标记-清除算法将会导致产生大量的空间碎片，往往出现老年代空间剩余，但是没有足够大的空间来分配当前对象，以致于不得不提前触发一次Full GC</li>
</ul>
<h4 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7. G1收集器"></a>7. G1收集器</h4><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多CPU和大内存的应用场景下有很好的性能。HotSpot开发团队赋予它的使命是未来可以替换掉CMS收集器。</p>
<p>堆被分成新生代和老年代，其他收集器进行收集的范围都是新生代或者老年代，但是G1可以对新生代和老年代一起回收。</p>
<p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4cf711a8-7ab2-4152-b85c-d5c226733807.png" alt="img"></p>
<p>G1把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。</p>
<p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9bbddeeb-e939-41f0-8e8e-2b1a0aa7e0a7.png" alt="img"></p>
<p>通过引入Region的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种回收方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个Region垃圾回收时间以及回收所获得的空间(这两个值是通过过去回收的经验所得)，并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的空间。</p>
<p>每个Region都有一个 Remembered Set，用来记录该Region对象的引用所在的Region，通过Remembered Set，在做可达性分析的时候就可以避免全堆扫描。</p>
<p>如果不计算维护Remembered Set的操作，G1收集器的运作分为以下几个步骤：</p>
<ul>
<li>初始标记</li>
<li>并发标记</li>
<li>最终标记：为了修正在并发期间由于用户线程工作导致标记产生变动的那一部分的标记记录，虚拟机将这段时间对象变化记录在线程的Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs数据合并到Remembered Set中，这个阶段需要停顿线程，但是可并行执行。</li>
<li>筛选回收：首先对各个Region中的回收价值和回收成本进行排序，根据用户所期望的GC停顿时间来指定回收计划，此阶段其实也可做到与用户线程一起并发执行，但是因为只回收一部分Region，时间是用户控制的，而且停顿用户线程将大幅提高收集效率。</li>
</ul>
<p>具备如下特点：</p>
<ul>
<li>空间整合：整体上来看是基于“标记-整理”算法实现的收集器，从局部的Region上来看是基于复制算法来的，这意味着在运行期间不会产生空间碎片。</li>
<li>可预测的停顿：能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在GC的时间不得超过N毫秒。</li>
</ul>
<h2 id="三、内存分配与回收策略"><a href="#三、内存分配与回收策略" class="headerlink" title="三、内存分配与回收策略"></a>三、内存分配与回收策略</h2><h3 id="Minor-GC和Full-GC"><a href="#Minor-GC和Full-GC" class="headerlink" title="Minor GC和Full GC"></a>Minor GC和Full GC</h3><ul>
<li>Minor GC：回收新生代，因为新生代对象存活的时间很短，因此Minor会频繁执行，执行的速度一般也会比较快。</li>
<li>Full GC：回收老年代和新生代，老年代对象器存活时间长，因此Full GC很少执行，执行速度会比Minor GC慢很少。</li>
</ul>
<h3 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h3><h4 id="1-对象优先在Eden上分配"><a href="#1-对象优先在Eden上分配" class="headerlink" title="1. 对象优先在Eden上分配"></a>1. 对象优先在Eden上分配</h4><p>大多数情况下，对象在新生代Eden上分配，当Eden上空间不足时，发动Minor GC</p>
<h4 id="2-大对象直接进入老年代"><a href="#2-大对象直接进入老年代" class="headerlink" title="2. 大对象直接进入老年代"></a>2. 大对象直接进入老年代</h4><p>大对象是指需要连续内存空间的对象，最典型的大对象就是那种很长的字符串以及数组</p>
<p>经常出现大对象会提前触发垃圾收集以获得足够的连续空间分配给大对象</p>
<p>-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在Eden和Survivor之间的大量内存复制</p>
<h4 id="3-长期存活的对象进入老年代"><a href="#3-长期存活的对象进入老年代" class="headerlink" title="3. 长期存活的对象进入老年代"></a>3. 长期存活的对象进入老年代</h4><p>为对象定义年龄计数器，对象在Eden上出生并经历Minor GC后依然存活，将移动到Survivor中，年龄增加一岁，增加到一定年龄的对象移动到老年代中。默认是15岁</p>
<p>-XX:MaxTenuringThreshold，用来定义年龄的阈值</p>
<h4 id="4-动态对象年龄判断"><a href="#4-动态对象年龄判断" class="headerlink" title="4. 动态对象年龄判断"></a>4. 动态对象年龄判断</h4><p>虚拟机并不是永远要求对象的年龄必须达到MaxTenuringThreshold才能晋升到老年代，如果在Survivor中相同年龄的所有对象大小的总和超过Survivor空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</p>
<h4 id="5-空间分配担保"><a href="#5-空间分配担保" class="headerlink" title="5. 空间分配担保"></a>5. 空间分配担保</h4><p>在发生Minor GC之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果条件成立的话，那么Minor GC可以确认是安全的。</p>
<p>如果不成立的话虚拟机会查看 HandlePromotionFailure的值是否允许担保失败，如果允许的话就继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于的话，将尝试着进行一次Minor GC操作；如果小于的话，或者HandlePromotionFailure的值不允许冒险，则需要进行以此Full GC</p>
<h3 id="Full-GC的触发条件"><a href="#Full-GC的触发条件" class="headerlink" title="Full GC的触发条件"></a>Full GC的触发条件</h3><p>对于Minor GC的话，其触发条件非常简单，当Eden空间满的时候，将触发一次Minor GC操作，而Full GC相对比较复杂。有以下条件：</p>
<h4 id="1-调用System-gc"><a href="#1-调用System-gc" class="headerlink" title="1. 调用System.gc()"></a>1. 调用System.gc()</h4><p>只是建议虚拟机执行Full GC，但是虚拟机不一定真正的去执行。不建议使用这种方式，而是让虚拟机管理内存。</p>
<h4 id="2-老年代空间不足"><a href="#2-老年代空间不足" class="headerlink" title="2. 老年代空间不足"></a>2. 老年代空间不足</h4><p>老年代空间不足的场景如上文中的大对象直接进入老年代，长期存活的对象进入老年代等。</p>
<p>为了避免以上原因引起的Full GC，应当尽量不要创建过大的对象以及数组，除此之外，可以通过-Xmn虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过-XX:MaxTenuringThreshold调大进入老年代的年龄，让对象在新生代中存活时间长一点。</p>
<h4 id="3-空间分配担保失败"><a href="#3-空间分配担保失败" class="headerlink" title="3. 空间分配担保失败"></a>3. 空间分配担保失败</h4><p>Minor GC后存活的对象没有足够的空间可以容纳它，此时需要担保进入老年代，如果担保失败此时会触发Full GC</p>
<h4 id="4-JDK1-7及以前的永久代空间不足"><a href="#4-JDK1-7及以前的永久代空间不足" class="headerlink" title="4. JDK1.7及以前的永久代空间不足"></a>4. JDK1.7及以前的永久代空间不足</h4><p>在JDK1.7之前，HotSpot虚拟机中的方法区是永久代实现的，永久代存放的是Class的信息，常量，静态变量等数据。</p>
<p>当系统中要加载的类、反射的类和调用的方法较多时，永久代可能被占满，在未配置CMS GC的时候也会执行Full GC，如果经过Full GC仍然回收不了，那么虚拟机会抛出<code>java.lang.OutOfMemoryError</code></p>
<p>为避免以上原因引起的Full GC，可采用的方法为增大永久代空间或者转变为使用CMS GC</p>
<h4 id="5-Concurrent-Mode-Failure"><a href="#5-Concurrent-Mode-Failure" class="headerlink" title="5. Concurrent Mode Failure"></a>5. Concurrent Mode Failure</h4><p>执行CMS GC的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是GC过程中浮动垃圾过多导致暂时性的空间不足），便会报Concurrent Mode Failure错误，并触发Full GC</p>
<h2 id="四、类加载机制"><a href="#四、类加载机制" class="headerlink" title="四、类加载机制"></a>四、类加载机制</h2><p>类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类，因为如果一次性加载，那么会占用很多的内存。</p>
<h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p>七个阶段：</p>
<ol>
<li>加载-Loading</li>
<li>验证-Verficiation</li>
<li>准备-Preparation</li>
<li>解析-Resolution</li>
<li>初始化-Initialization</li>
<li>使用-Using</li>
<li>卸载-Unloading</li>
</ol>
<h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><p>类加载过程包括：加载、验证、准备、解析、初始化五个过程</p>
<h4 id="1-加载"><a href="#1-加载" class="headerlink" title="1. 加载"></a>1. 加载</h4><p>加载是类加载的第一个阶段，不要混淆加载与类加载的概念，加载只是类加载的一个部分。</p>
<p>加载过程完成以下三件事：</p>
<ul>
<li>通过类的全限定名获取定义该类的二进制字节流</li>
<li>将该字节流表示的静态存储结构转换为方法区的运行时的存储结构</li>
<li>在内存中生成一个代表该类的Class对象，作为方法区中该类各种数据的访问入口</li>
</ul>
<p>其中二进制文件流可以从如下途径中获取：</p>
<ul>
<li>从ZIP包中读取，成为JAR，EAR、WAR格式的基础</li>
<li>从网络中获取，最典型的就是Applet</li>
<li>运行时计算生成。例如动态代理技术，在java.lang.reflect.proxy使用ProxyGenerator.generateProxyClass的代理类的二进制字节流</li>
<li>由其他文件生成，例如由JSP生成对应的Class类</li>
</ul>
<h4 id="2-验证"><a href="#2-验证" class="headerlink" title="2. 验证"></a>2. 验证</h4><p>确保Class的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
<h4 id="3-准备"><a href="#3-准备" class="headerlink" title="3. 准备"></a>3. 准备</h4><p>如果是被static修饰的类变量，准备阶段会为类变量分配内存以及设置初始值，使用的是方法区的内存</p>
<p>实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在堆中。应该注意到，实例化不是类加载的一个过程，类加载发生在所有实例初始化之前，并且类加载只有一次，实例化可以有多次。</p>
<p>初始值一般为0，但是如果用final修饰的变量为表达式赋予的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">123</span>; <span class="comment">// 初始值0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> b = <span class="number">123</span>; <span class="comment">// 初始值123</span></span><br></pre></td></tr></table></figure>

<h4 id="4-解析"><a href="#4-解析" class="headerlink" title="4. 解析"></a>4. 解析</h4><p>将常量池的符号引用替换为直接引用的过程。</p>
<p>其中解析过程在某些情况下可以在初始化阶段开始之后再开始，是为了支持Java的动态绑定。</p>
<h4 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5. 初始化"></a>5. 初始化</h4><p>初始化阶段才真正开始执行类中定义的Java程序代码，初始化阶段是虚拟机执行类构造器<code>&lt;clinit&gt;()</code>方法的过程，在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，则是根据程序员通过程序制定的主观计划去初始化类变量和其他资源。</p>
<p><code>&lt;clinit&gt;()</code>是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的先后顺序决定，特别注意的是，静态语句块只能访问到定义在它之前的类变量。定义在它之后的类变量只能赋值。不能访问。</p>
<p>JDK1.8下运行如下代码会输出0. JDK1.7的看代码中注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 给变量赋值可以正常编译通过</span></span><br><span class="line">        System.out.println(i); <span class="comment">// 编译器提示“非法向前引用”</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassTest test = <span class="keyword">new</span> ClassTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于父类<code>&lt;clinit&gt;()</code>方法先执行，意味着父类中定义的静态语句块的执行要优先于子类。（继承）</p>
<p>接口中不能使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成<code>&lt;clinit&gt;()</code>方法，但接口与类不同的是，执行接口的<code>&lt;clinit&gt;()</code>方法不需要先执行父类接口中的<code>&lt;clinit&gt;()</code>方法。只有在父接口中定义的变量被使用的时候，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;()</code>方法。</p>
<p>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程的环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都会阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。如果在一个类的<code>&lt;clinit&gt;()</code>方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中这种阻塞很隐蔽。</p>
<h3 id="类初始化的时机"><a href="#类初始化的时机" class="headerlink" title="类初始化的时机"></a>类初始化的时机</h3><h4 id="1-主动引用"><a href="#1-主动引用" class="headerlink" title="1. 主动引用"></a>1. 主动引用</h4><p>虚拟机规范中并没有强制约束何时进行加载，但是规范严格规范了有且只有下列五种情况必须对类进行初始化（加载、验证、准备、解析都会随之发生）</p>
<ul>
<li>遇到new，getstatic，putstatic，invokestatic这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这4条指令的场景是：使用new关键字实例化对象的时候；读取或设置一个类的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。</li>
<li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类还没有初始化，则需要先触发初始化</li>
<li>当初始化一个类的时候，发现其父类还没有初始化，则需要先初始化其父类</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main方法的那个类），虚拟机会先初始化这个类</li>
<li>当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic，REF_putStatic，REF_invokeStatic的方法句柄，并且这个方法的句柄所对应的类没有初始化，则需要先触发其先初始化</li>
</ul>
<h4 id="2-被动引用"><a href="#2-被动引用" class="headerlink" title="2. 被动引用"></a>2. 被动引用</h4><p>上述五种场景的行为被称为对一个类进行主动引用，除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用如下：</p>
<ul>
<li>通过子类引用父类的静态字段，不会导致子类被初始化。下列代码会输出”父类初始化…..”</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Son.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String s = <span class="string">"Hello World!"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"父类初始化....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类初始化......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过数组定义引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承字Object的子类，其中包含了数组的属性和方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Son[] son = <span class="keyword">new</span> Son[<span class="number">10</span>]; <span class="comment">// 不会初始化Son</span></span><br></pre></td></tr></table></figure>

<ul>
<li>常量在编译阶段会存入调用类的常量池，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Father.s);<span class="comment">// 不会初始化</span></span><br></pre></td></tr></table></figure>

<h3 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h3><p>两个类相等，需要类本身相等，并且使用同一个类加载器加载，这是因为每一个类加载器都拥有一个独立的类名称空间。</p>
<p>这里的相等，包括类的Class对象的equals()方法，isAaaignableFrom()方法，isInstance()方法的返回结果为true，也包括使用instanceOf关键字做对象所属关系判定结果为true</p>
<h3 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h3><p>从Java虚拟机的角度来说，只存在一下两种类加载器：</p>
<ul>
<li>启动类加载器（Boostrap ClassLoader）：使用C++实现，是虚拟机自身的一部分</li>
<li>所有其他类加载器，使用Java实现，独立于虚拟机，继承自抽象类java.land.ClassLoader</li>
</ul>
<p>从java开发人员的角度来看，类加载器可以划分的更细：</p>
<ul>
<li>启动类加载器（Bootstrap ClassLoader） ：此类加载器负责将存放在<code>JRE_HOME\lib</code>目录中的或者被<code>-Xbootclasspath</code>参数所指定的路径中的，并且是被虚拟机识别的（仅按照文件名识别，如rt.jar，名字不符合的类库即使放在目录下也不会被加载）类库加载到虚拟机内存中，启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器的时候，如果需要把加载请求委派给启动类加载器，直接说过null即可</li>
<li>扩展类加载器（Extension ClassLoader）：这个启动类加载器是由ExtClassLoader实现的，它负责将<code>JAVA_HOME/lib/ext</code>或者被java.ext.dir系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。</li>
<li>应用程序类加载器（Application ClassLoader）：这个类加载器是由AppClassLoader实现的，这个类加载器是ClassLoader中的getClassLoader()方法的返回值，因此一般称为系统类加载器，他复杂加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下就是这个程序中的默认的类加载器。</li>
</ul>
<h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>应用程序是由三种类加载器互相配合从而实现类加载，除此之外还可以加入自定定义的类加载器。</p>
<p>下图就是双亲委派模型（Parents Delegation Model）的实现，该模型要求除了顶层的启动类加载器之外，其他的类加载器都要有自己的父加载器，这里的父子关系一般通过组合关系（表示我这个类由上一个类加载器，而我并不依赖他。所以非继承，是组合，has-a关系）来实现，而不是继承关系。</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1581672815558.png" alt="1581672815558"></p>
<h4 id="1-工作过程"><a href="#1-工作过程" class="headerlink" title="1. 工作过程"></a>1. 工作过程</h4><p>一个类加载器首先将类加载请求转发到父类加载器，只有当父类加载器无法完成加载时才尝试自己加载</p>
<h4 id="2-优势"><a href="#2-优势" class="headerlink" title="2. 优势"></a>2. 优势</h4><p>使得Java类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一</p>
<h4 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h4><p>代码中很明显父类加载失败，才尝试自己去加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p>一般自定义类加载器都是覆写findClass方法，然后通过defineClass将字节码转换成java.lang.Class类的实例。</p>
<p>自定义文件系统类加载器</p>
<p>参考：<a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/index.html#code6" target="_blank" rel="noopener">深入探讨 Java 类加载器</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String rootDir;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystemClassLoader</span><span class="params">(String rootDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootDir = rootDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] classData = getClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassData(String className) &#123;</span><br><span class="line">        String path = classNameToPath(className);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream ins = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> bufferSize = <span class="number">4096</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">            <span class="keyword">int</span> bytesNumRead = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((bytesNumRead = ins.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, bytesNumRead);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">classNameToPath</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rootDir + File.separatorChar</span><br><span class="line">                + className.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、JVM优化"><a href="#五、JVM优化" class="headerlink" title="五、JVM优化"></a>五、JVM优化</h2><table>
<thead>
<tr>
<th>操作命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>jps</td>
<td>打印HotSpot VM的进程</td>
</tr>
<tr>
<td>jstat</td>
<td>查看HotSpot VM运行时信息</td>
</tr>
<tr>
<td>jinfo</td>
<td>查看和修改虚拟机各项参数</td>
</tr>
<tr>
<td>jmap</td>
<td>heapdump：生成VM堆转储快照、查询finalize执行队列、Java堆和永久代详细信息</td>
</tr>
<tr>
<td>jstack</td>
<td>查看VM当前时刻的线程快照：当前VM内每一条线程正在执行的方法堆栈集合</td>
</tr>
<tr>
<td>javap</td>
<td>查看经javac编译后产生的JVM字节码代码</td>
</tr>
<tr>
<td>jcmd</td>
<td>多功能工具，可以用来导出堆，查看java进程、导出线程信息，执行GC、查看性能相关数据</td>
</tr>
<tr>
<td>jconsole</td>
<td>基于JMX的可视化监视、管理工具</td>
</tr>
<tr>
<td>jvisualvm</td>
<td>JDK中最强大运行监视和故障处理工具</td>
</tr>
</tbody></table>
<p><code>jps -l</code>：显示线程id和执行线程的主类名</p>
<p><code>jps -v</code>：显示线程id和执行线程的主类名和JVM配置信息</p>
<p><code>jstat -参数 线程id 执行时间 执行次数</code> =&gt; <code>jstat -gc 4488 30 10</code>：表示查看线程4488，30秒内执行10此的GC信息。</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2020/01/14/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>单纯的测试文章是否能够正常的发布！</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
